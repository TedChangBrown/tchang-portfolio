{"version":3,"sources":["static/me.jpeg","static/MyResume.pdf","components/Expander/index.js","components/Section/index.js","components/Header/index.js","components/Footer/index.js","containers/AboutPage/index.js","components/ProjectModal/index.js","containers/ProjectsPage/index.js","containers/Routes/index.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Expander","props","state","expanded","children","this","CSSTransition","in","timeout","classNames","unmountOnExit","className","nextProps","prevState","React","Component","Header","links","map","link","index","Fragment","styles","textDecoration","to","name","href","file","target","Footer","AboutPage","src","require","ProjectModal","active","title","imageSource","bkColor","githubLink","description","textColor","toggleModal","setState","style","onClick","enter","exit","e","stopPropagation","ProjectsPage","Routes","basename","render","location","TransitionGroup","key","pathname","appear","exact","path","component","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6c773e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.098a7c5f.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/MyResume.94d99b4b.pdf\";","import React from \"react\"\nimport { CSSTransition } from \"react-transition-group\"\nimport \"./styles.css\"\n\nclass Expander extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: false\n        }\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // do things with nextProps.someProp and prevState.cachedSomeProp\n        return {\n            expanded: nextProps.expanded,\n            // ... other derived state properties\n        };\n    }\n\n    render() {\n        const { children } = this.props\n        const { expanded } = this.state\n        return (\n            <CSSTransition in={expanded} timeout={500} classNames=\"dropdown\" unmountOnExit={true} >\n                <div className=\"random\">\n                    {children}\n                </div>\n            </CSSTransition>\n\n        )\n    }\n}\n\nexport default Expander","import React, { Component } from \"react\"\nimport \"./styles.css\"\nimport Expander from \"../Expander\"\nimport classNames from \"classnames\"\nimport {CSSTransition} from \"react-transition-group\"\n\nclass Section extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: false\n        }\n    }\n    render() {\n        const { children, title } = this.props\n        const { expanded } = this.state\n        const toggleExpand = () => {\n            this.setState(prevState => ({\n                expanded: !prevState.expanded\n            }));\n        }\n        return (\n            <div>\n                <CSSTransition in={expanded} timeout={500} classNames=\"headerTransition\">\n                    <div className={classNames({\n                        'sectionTitle': true,\n                        'active': expanded,\n                    })} onClick={toggleExpand}>{title}\n                    </div>\n                </CSSTransition>\n                <Expander expanded={expanded}>\n                    {children}\n                </Expander>\n            </div>\n        )\n    }\n}\nexport default Section","import React, { Component } from \"react\"\nimport classNames from \"classnames\"\nimport { NavLink } from \"react-router-dom\"\nimport \"./styles.css\"\nimport file from \"../../static/MyResume.pdf\";\n\nconst Header = ({ links }) => {\n    return (\n        <div className=\"tchang-header\">\n            <div className={classNames(\"header-element\", \"tchang-title\")}> Ted Chang </div>\n            <div className={classNames(\"header-element\", \"tchang-navbar\")}>\n                {links.map((link, index) =>\n                    <React.Fragment><NavLink styles={{ textDecoration: 'none' }} to={link.link} className=\"nav-action\">{link.name}</NavLink> </React.Fragment>\n                )}\n                <a href={file} target=\"_blank\" className=\"nav-action\">Resume</a>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React, { Component } from \"react\"\nimport classNames from \"classnames\"\nimport \"./styles.css\"\nconst Footer = () => {\n\n    return (\n        <div className=\"tchang-footer\">\n            <div className=\"outside-links\">\n                <a target=\"_blank\" href=\"https://www.linkedin.com/in/ted-zhe-chang\" className={classNames(\"outside-link\", \"linkedin\")}> </a>\n                <a target=\"_blank\" href=\"https://www.facebook.com/ted.chang.16\" className={classNames(\"outside-link\", \"facebook\")}> </a>\n                <a target=\"_blank\" href=\"https://github.com/TedChangBrown\" className={classNames(\"outside-link\", \"github\")}> </a>\n            </div>\n        </div >\n    )\n}\n\nexport default Footer","import React, { Component } from \"react\";\nimport classNames from \"classnames\"\nimport \"./styles.css\";\nconst AboutPage = () => {\n  return (\n    <div className={classNames(\"grid-content\",\"about-content\")}>\n      <h2 className=\"title\"> About Me </h2>\n      <div className=\"introduction\">\n        <p>\n          Hi! My name is Ted. I'm currently a junior at Brown University\n          studying computer science. My studies primarily revolve around\n          computer systems and data science. I also enjoy learning about\n          behavioural psychology as well as psychological disorders.\n        </p>\n        <p>\n          I'm very interested in data pipelining\n          and management, more specifically the optimization of computer systems\n          and networks for the collection and storage of big data.\n        </p>\n        <p>\n          Outside of my studies I enjoy relaxing as home and spending time with\n          my friends and significant other. Otherwise you'll find me in the gym\n          working off said relaxation ;)\n        </p>\n      </div>\n      <img src={require(\"../../static/me.jpeg\")} className=\"portrait\" />\n    </div>\n  );\n};\n\nexport default AboutPage;\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport classNames from \"classnames\";\nimport \"./styles.css\";\nimport Expander from \"../Expander\";\n\nclass ProjectModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false\n    };\n  }\n  render() {\n    const {\n      imageSource,\n      title,\n      githubLink,\n      bkColor,\n      textColor,\n      description\n    } = this.props;\n    const { active } = this.state;\n    const toggleModal = () => {\n      this.setState(prevState => ({\n        active: !prevState.active\n      }));\n    };\n    return (\n      <React.Fragment>\n        <div className=\"base-card\">\n          <div\n            className=\"base-card-title\"\n            style={{ \"background-color\": bkColor }}\n            onClick={toggleModal}\n          >\n            {title}\n          </div>\n          <div className=\"base-card-text\" onClick={toggleModal}>\n            <p>{description}</p>\n          </div>\n          <div className=\"base-card-links\">\n            <div\n              className={classNames(\"base-card-link-item\", \"base-card-toggle\")}\n              onClick={toggleModal}\n            >\n              <div className=\"base-card-toggle-img\"></div>\n              <div className=\"base-card-toggle-text\"> Read More </div>\n            </div>\n            <div\n              className={classNames(\"base-card-link-item\", \"base-card-code\")}\n            >\n              <div className=\"base-card-code-img\"></div>\n              <div className=\"base-card-code-text\">View Code</div>\n            </div>\n          </div>\n        </div>\n        <CSSTransition\n          in={active}\n          timeout={{ enter: 1200, exit: 300 }}\n          classNames=\"toggle\"\n          unmountOnExit={true}\n        >\n          <div className=\"modal\" onClick={toggleModal}>\n            <div className=\"modalContent\" onClick={e => e.stopPropagation()}>\n              <div\n                className=\"modal-title\"\n                style={{ \"background-color\": bkColor }}\n              >\n                <h3>{title}</h3>\n              </div>\n              <button className=\"exitButton\" onClick={toggleModal}>\n                x\n              </button>\n              <div className=\"modal-content-body\">\n                <div className=\"modalSidebar\">\n                  <div className=\"imageContainer\">\n                    <img\n                      src={require(\"../../static/me.jpeg\")}\n                      className=\"modal-image\"\n                    />\n                  </div>\n                </div>\n                <div className=\"modalText\"></div>\n              </div>\n            </div>\n          </div>\n        </CSSTransition>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectModal;\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport \"./styles.css\";\nimport ProjectModal from \"../../components/ProjectModal\";\nconst ProjectsPage = () => {\n  return (\n    <div className={classNames(\"grid-content\", \"project-content\")}>\n      <ProjectModal\n        title=\"Spell Intern\"\n        bkColor=\"#C58BE7\"\n        description=\"While at Spell I got a chance to work on machine learning infastructure. I primarily worked on their data pipeline as well as their web console.\"\n      />\n      <ProjectModal title=\"Twitch Match\" bkColor=\"#6441a5\" description={\"Twitch match is a platform created to allow streamers to connect with one another in order to build larger followings based on the similarities of their audiences and content.\"} />\n      <ProjectModal title=\"Maps\" bkColor=\"#1EA362\" description=\"Maps is a simple clone of google maps for the providence area. It's features include finding shortest paths based on traffic as well as searching for streets and addresses\"/>\n      <ProjectModal title=\"Applied Materials Intern\" bkColor=\"#569CBE\" />\n      <ProjectModal title=\"Portfolio\" bkColor=\"#00d8ff\" />\n    </div>\n  );\n};\n\nexport default ProjectsPage;\n","import React, { Component } from \"react\"\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\"\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"\nimport \"./styles.css\"\nimport Header from \"../../components/Header\"\nimport Footer from \"../../components/Footer\"\nimport AboutPage from \"../AboutPage\"\nimport ProjectsPage from \"../ProjectsPage\"\nconst Routes = () => {\n    return (\n        <Router basename=\"/\">\n            <Route render={({ location }) => (\n                <div className=\"main\">\n                    <Header links={[{ name: \"About\", link: \"/\" }, { name: \"Projects\", link: \"/projects\" }]} />\n                        <TransitionGroup>\n                            <CSSTransition key={location.pathname} timeout={{ enter: 500, exit: 0, appear: 500 }}\n                                classNames=\"fade\">\n                                <Switch>\n                                    <Route exact path=\"/\" component={AboutPage} />\n                                    <Route path=\"/projects\" component={ProjectsPage} />\n                                </Switch>\n                            </CSSTransition>\n                        </TransitionGroup>\n                    <Footer />\n                </div>)} />\n        </Router>\n    )\n}\n\nexport default Routes","import React from 'react';\nimport './styles.css';\nimport Section from \"../../components/Section\"\nimport Routes from \"../Routes\"\n\n\nfunction App() {\n    return (\n        <Routes />\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport \"./index.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}